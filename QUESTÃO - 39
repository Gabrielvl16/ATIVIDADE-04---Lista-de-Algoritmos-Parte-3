#include <stdio.h>
#include <stdlib.h>
#include <ctype.h>

#define TAMANHO_MAXIMO 100 // Tamanho máximo da pilha

// Definição da estrutura da pilha
typedef struct {
    int itens[TAMANHO_MAXIMO];
    int topo;
} Pilha;

// Função para inicializar a pilha
void inicializarPilha(Pilha* p) {
    p->topo = -1;
}

// Função para verificar se a pilha está vazia
int estaVazia(Pilha* p) {
    return p->topo == -1;
}

// Função para empilhar um elemento
void empilhar(Pilha* p, int valor) {
    if (p->topo == TAMANHO_MAXIMO - 1) {
        printf("Erro: pilha cheia\n");
        exit(EXIT_FAILURE);
    }
    p->itens[++(p->topo)] = valor;
}

// Função para desempilhar um elemento
int desempilhar(Pilha* p) {
    if (estaVazia(p)) {
        printf("Erro: pilha vazia\n");
        exit(EXIT_FAILURE);
    }
    return p->itens[(p->topo)--];
}

// Função para avaliar uma expressão pós-fixa
int avaliarPosfixa(char* expressao) {
    Pilha pilha;
    inicializarPilha(&pilha);
    
    for (int i = 0; expressao[i]; i++) {
        // Se o caractere é um número, empilhe-o
        if (isdigit(expressao[i])) {
            empilhar(&pilha, expressao[i] - '0');
        }
        // Se o caractere é um operador, desempilhe dois operandos e aplique o operador
        else {
            int op2 = desempilhar(&pilha);
            int op1 = desempilhar(&pilha);
            switch (expressao[i]) {
                case '+': empilhar(&pilha, op1 + op2); break;
                case '-': empilhar(&pilha, op1 - op2); break;
                case '*': empilhar(&pilha, op1 * op2); break;
                case '/': empilhar(&pilha, op1 / op2); break;
            }
        }
    }
    // O resultado final é o único elemento restante na pilha
    return desempilhar(&pilha);
}

int main() {
    char expressao[TAMANHO_MAXIMO];
    printf("Digite uma expressão pós-fixa: ");
    scanf("%s", expressao);
    
    int resultado = avaliarPosfixa(expressao);
    printf("Resultado da expressão: %d\n", resultado);
    
    return 0;
}
