#include <stdio.h>
#include <stdlib.h>

// Função para trocar dois elementos
void trocar(int *a, int *b) {
    int temp = *a;
    *a = *b;
    *b = temp;
}

// Função para encontrar a posição de partição
int particionar(int arr[], int low, int high) {
    int pivot = arr[high]; // Escolhe o último elemento como pivô
    int i = (low - 1); // Índice do menor elemento

    for (int j = low; j < high; j++) {
        // Se o elemento atual é menor ou igual ao pivô
        if (arr[j] <= pivot) {
            i++; // Incrementa o índice do menor elemento
            trocar(&arr[i], &arr[j]); // Troca elementos
        }
    }
    trocar(&arr[i + 1], &arr[high]); // Coloca o pivô na posição correta
    return (i + 1); // Retorna o índice do pivô
}

// Função principal que implementa o Quick Sort
void quickSort(int arr[], int low, int high) {
    if (low < high) {
        // Encontra o índice de partição, tal que os elementos à esquerda são menores e os à direita são maiores que o pivô
        int pi = particionar(arr, low, high);

        // Ordena recursivamente os elementos antes e depois da partição
        quickSort(arr, low, pi - 1);
        quickSort(arr, pi + 1, high);
    }
}

// Função para imprimir o array
void imprimirArray(int arr[], int tamanho) {
    for (int i = 0; i < tamanho; i++) {
        printf("%d ", arr[i]);
    }
    printf("\n");
}

int main() {
    int arr[] = {10, 7, 8, 9, 1, 5}; // Exemplo de array
    int n = sizeof(arr) / sizeof(arr[0]); // Tamanho do array

    printf("Array antes da ordenação: \n");
    imprimirArray(arr, n); // Imprime o array original

    quickSort(arr, 0, n - 1); // Chama a função de ordenação

    printf("Array após a ordenação: \n");
    imprimirArray(arr, n); // Imprime o array ordenado

    return 0;
}
